각자의 객체가 독립적으로 동작할 수 있는게 좋음




제너릭
public class Box<E>{
	private E e ;
	public E getE(){
		return e;
	}
	public void setE(E e){
		this.e = e;
	}
	public static void mains(String[] args){
		Box<String> stringBox = new Box<>();
		stringBox.setE("a");
		Box<Integer> intBox = new Box<>();
	}
}
==>E 대신 타입을 넣어서 사용 할 때마다 다르게 값을 사용할 수 있다.(K,V), (E) 등이 있다.


문자를 받고 출력하는 애들
I/Ostream
reader writer=> 문자를 받을때 좋음
BufferedInputStream => 혼자 못쓰고 다른 객체와 같이 쓸 수 있다. =>사용 하기 편하게 하려고(InputStream in)이 생성자에 같이 들어와야 한다.
(데코레이션 패턴)

키보드 => System.in
한줄씩 BufferdReader br = new Buffer

fileinputStream	=> 입력 받는
fileoutputStream	=> 출력 받는

filesInput/OutputStream => 선언과 초기화가 각각 따로(try-catch)
fileInputStream-> 경로는 기본적으로 프로젝트에서 시작한다(절대경로로 해도 괜찮다)

file은 운영체제가 사용한다.
Stream => 한번 흐르면 끝이다. 하지만 장식 클래스들이 다시 쓰게 할 수 있다.
reader, writer,... => 추상 클래스
bytestream=> 동영상, 영어, 사진.. 등등
reader, writer=>문자(한글 깨짐 방지)

BufferdReader=> readerline때문에 많이 사용됨


주인공
장식 => 가지고있는 기능 때문에 씀(메서드가 중요하다).

ex)  inputStreamReader()=>InputStrea과 BufferedReader사이에서 inputstream을 Reader타입으로 바꿔진다.

PrintWriter => 

Scanner

close()문제 
- file은 운영체제가 열고 닫는데 File을 열고 close를 안하면 운영체제가 가득 차지 않은 버퍼로는 파일에 쓰려고 하지 않는다.
따라서 파일을 열면 무조건 close를 해줘야 하고 try(){} 안에 File 여는 문장을 넣으면 자동으로 close를 해준다.!