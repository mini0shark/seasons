
===========================복습===========================
Warpper클래스..
객체가 아닌 데이터 들을 객체 타입으로 바꿔준다
박싱, 언박싱
auto boxing, auto unboxing

객체지향
객체를 설계하는게 중요하다.!!!

객체지향쪽으로 설계를 잘 하는게 중요하다.

추상클래스 VS 인터페이스

추상클래스 
-> 부모클래스에서	상속을 받아서 기능을 확장시키는 데 목적
기존의 클래스에서 공통된 부분을 추상화하여 상속하는 클래스에게 구현을 강제화 
메서드의 동작을 구현하는 자식클래스로 책임을 위임 
추상메소드는 아래와 같이 메소드 구현부가 없는 메소드이다.
관련성이 높은 클래스 간에 코드를 공유하고 싶은 경우
추상클래스를 상속받은 클래스들이 공통으로 가지는 메소드와 필드가 많거나, public 이외의 접근제어자(protected, private) 사용이 필요한 경우
non-static, non-final 필드 선언이 필요한 경우. 즉, 각 인스턴스에서 state 변경을 위한 메소드를 선언할 수 있다.


인터페이스
구현 객체의 같은 동작을 보장하기 위한 목적
인터페이스에서 모든 변수는 기본적으로 public static final 이며, 모든 메소드는 public abstract 인 반면 
서로 관련성이 없는 클래스들이 인터페이스를 구현하게 되는 경우에 사용한다. 예를 들어, Comparable, Cloneable 인터페이스는 여러 클래스들에서 구현되는데, 구현클래스들 간에 관련성이 없는 경우가 대부분이다.
특정 데이터 타입의 행동을 명시하고 싶은데, 어디서 그 행동이 구현되는지는 신경쓰지 않는 경우.
다중상속을 허용하고 싶은 경우
인터페이스에 있는 추상메소드도 반드시 오버라이딩 시켜야함
abstract클래스들로 이루어져 있기 때문에 반드시 모든 메서드 들을 오버라이딩 해야 한다.
※default메서드는 따로 오버라이딩 할 필요가 없다(많은 상속을 시킨 이후에 추가되는 메서드를 고려하여 구현을 해놓을 수 있다.)

===============
인터페이스는 클래스가 아니지만 추상 클래스는 클래스다.

공유의 목적
인터페이스 ->  다중 구현 가능
인터페이스는 필드가 없고 상수와 메서드만 정의 할 수 있다.
구현하는 모든 클래스에 대해 특정한 메서드가 반드시 존재하도록 강제한다.




String  문자열을 추상화 시켜놓은=> string
한번 객체가 생기면 안바뀜

메서드에서 string을 계속 + 하기보다 stringBuffer를 사용하는게 좋다.
print => 스트링 버퍼를 가지고 있어 연산을 해서 반환

Package

예외처리
파일을 처리해야하는데 없다던가 네트워크 연결이 안되어 있다던지=> 프로그램이 끝나버리는 것을 방지




================================================================================
==================================== 자료구조 =====================================
================================================================================
List : 순서가 있는 데이터 집합 => 데이터 중복을 허용
==>Search 속도가 굉장히 느림(순서대로 찾아봐야함)
ex) ArrayList, LinkedList, Stack, Vector등

Set : 순서를 유지하지 않는 데이터 집합 => 데이터 중복을 허용하지 않음
ex) HashSet, Tree set 등

Map key와 value의 쌍으로 이루어진 데이터 집합
ex) HashMap, TreeMap, Hashtable, Properties

동기화
-사용자가 입력할 때 까지 동작x
먼저 동작을 하던 애가 동작을 끝날때 까지 접근을 막는것
- 벡터는 동기화가 되어있음
- ArrayList는 동기화가 안되어 있음
==> 동기화 방법이 여러가지여서 벡터를 잘 쓰지 않음

쓰레드
- 여러가지 일을 동시에 처리하는 것


ArrayList에서 foreach와 get으로 String을 얻는 차이
=> 직접 object를 꺼내는 것

Collections = >shuffle()등 가지고 있는 클래스


객체들이 자유 의지를 가져서 행동 할 수 있는 것들
이 행위는 누가 저 행위는 누구, 기능이 추가 되었을때 변경이 용이 할까?

자료구조
List <- LinkedList, ArrayList,... 
Set <- HashSet
set은 중복값을 허용하지 않는다.


list를 프린트하면 Object가 지원하는 toString=> toString을 자신이 원하는 값을 반환하도록 overriding

자바의 Stack 클래스는 Vector를 상속 받았기 때문에 완전한 스택이 아니다. 쓰려면 하나 만들어서 사용해야함

generic을 공부해서 mystack을 받는애, Book을 받는 애.. 등등을 생각해봐서 해보기

